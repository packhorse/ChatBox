{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class ViewController: UIViewController \{\
    @IBOutlet weak var datePicker: UIDatePicker!\
    \
    \
    override func viewDidLoad() \{\
        super.viewDidLoad()\
        \
\
        \
    \}\
    \
    // Sleeping the UI\
    @IBAction func sleepButtonTapped(_ sender: Any) \{\
//        sleepBackgroundThread()\
//        printSyncronously()\
        printAsyncronously()\
    \}\
    \
    func sleepUI() \{\
        Thread.sleep(forTimeInterval: 5)\
    \}\
    \
    func printSyncronously() \{\
        for number in 1...10 \{\
            print(number)\
        \}\
        // has to wait until the first chunc is done\
        for number in 11...20 \{\
            print(number)\
        \}\
        \
    \}\
    \
\
    \
    // How to things can happen at once\
    // UI - stuff is the Main Thread\
    // Running at the same time\
    func printAsyncronously() \{\
        let names = ["porter", "Xavier", "Ivan", "Kayden"]\
        let queque = DispatchQueue(label: "backgroundSleepQueue")\
        let quequ2 = DispatchQueue(label: "secondBackgroundQueue")\
        let quequ3 = DispatchQueue(label: "thridBackgroundQueue")\
        \
        // que first in first out\
        queque.async \{\
            for number in 1...10 \{\
                print(number)\
            \}\
        \}\
        quequ2.async \{\
            for number in 11...20 \{\
                print(number)\
            \}\
        \}\
        \
        quequ3.async \{\
            for name in names \{\
                print(name)\
            \}\
          \
        \}\
        \
    \}\
    \
    func sleepBackgroundThread() \{\
        \
        let newBackgroundThread = DispatchQueue(label: "newBackgroundThread")\
        \
        newBackgroundThread.async \{\
            print(Thread.isMainThread)\
            for n in 1...5 \{\
                print(n)\
                Thread.sleep(forTimeInterval: 3)\
            \}\
        \}\
        \
    \}\
    \
    \
\}}